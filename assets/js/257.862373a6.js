(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{455:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"extrinsics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extrinsics"}},[e._v("#")]),e._v(" Extrinsics")]),e._v(" "),a("p",[e._v("The following sections contain Extrinsics methods are part of the default Substrate runtime. On the api, these are exposed via "),a("code",[e._v("api.tx.<module>.<method>")]),e._v(".")]),e._v(" "),a("p",[e._v("(NOTE: These were generated from a static/snapshot view of a recent Substrate master node. Some items may not be available in older nodes, or in any customized implementations.)")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#authorship"}},[e._v("authorship")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#balances"}},[e._v("balances")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#contracts"}},[e._v("contracts")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#council"}},[e._v("council")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#democracy"}},[e._v("democracy")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#elections"}},[e._v("elections")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#finalitytracker"}},[e._v("finalityTracker")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#grandpa"}},[e._v("grandpa")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#identity"}},[e._v("identity")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#imonline"}},[e._v("imOnline")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#indices"}},[e._v("indices")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#recovery"}},[e._v("recovery")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#session"}},[e._v("session")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#society"}},[e._v("society")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#staking"}},[e._v("staking")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#sudo"}},[e._v("sudo")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#system"}},[e._v("system")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#technicalcommittee"}},[e._v("technicalCommittee")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#technicalmembership"}},[e._v("technicalMembership")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#timestamp"}},[e._v("timestamp")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#treasury"}},[e._v("treasury")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#utility"}},[e._v("utility")])])])]),e._v(" "),a("li",[a("p",[a("strong",[a("a",{attrs:{href:"#vesting"}},[e._v("vesting")])])])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"authorship"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorship"}},[e._v("#")]),e._v(" authorship")]),e._v(" "),a("h3",{attrs:{id:"setuncles-new-uncles-vec-t-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setuncles-new-uncles-vec-t-header"}},[e._v("#")]),e._v(" setUncles(new_uncles: "),a("code",[e._v("Vec<T::Header>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.authorship.setUncles")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Provide a set of uncles.")])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"balances"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#balances"}},[e._v("#")]),e._v(" balances")]),e._v(" "),a("h3",{attrs:{id:"forcetransfer-source-t-lookup-as-staticlookup-source-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forcetransfer-source-t-lookup-as-staticlookup-source-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[e._v("#")]),e._v(" forceTransfer(source: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", dest: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", value: "),a("code",[e._v("Compact<T::Balance>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.balances.forceTransfer")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Exactly as "),a("code",[e._v("transfer")]),e._v(", except the origin must be root and the source account may be specified.")])]),e._v(" "),a("h3",{attrs:{id:"setbalance-who-t-lookup-as-staticlookup-source-new-free-compact-t-balance-new-reserved-compact-t-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setbalance-who-t-lookup-as-staticlookup-source-new-free-compact-t-balance-new-reserved-compact-t-balance"}},[e._v("#")]),e._v(" setBalance(who: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", new_free: "),a("code",[e._v("Compact<T::Balance>")]),e._v(", new_reserved: "),a("code",[e._v("Compact<T::Balance>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.balances.setBalance")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the balances of a given account.")]),e._v(" "),a("p",[e._v("This will alter "),a("code",[e._v("FreeBalance")]),e._v(" and "),a("code",[e._v("ReservedBalance")]),e._v(" in storage. it will also decrease the total issuance of the system ("),a("code",[e._v("TotalIssuance")]),e._v("). If the new free or reserved balance is below the existential deposit, it will reset the account nonce ("),a("code",[e._v("frame_system::AccountNonce")]),e._v(").")]),e._v(" "),a("p",[e._v("The dispatch origin for this call is "),a("code",[e._v("root")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads and writes.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"transfer-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[e._v("#")]),e._v(" transfer(dest: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", value: "),a("code",[e._v("Compact<T::Balance>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.balances.transfer")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Transfer some liquid free balance to another account.")]),e._v(" "),a("p",[a("code",[e._v("transfer")]),e._v(" will set the "),a("code",[e._v("FreeBalance")]),e._v(" of the sender and receiver. It will decrease the total issuance of the system by the "),a("code",[e._v("TransferFee")]),e._v(". If the sender's account is below the existential deposit as a result of the transfer, the account will be reaped.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("code",[e._v("Signed")]),e._v(" by the transactor.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Dependent on arguments but not critical, given proper implementations for  input config types. See related functions below.")])]),e._v(" "),a("li",[a("p",[e._v("It contains a limited number of reads and writes internally and no complex computation.")])])]),e._v(" "),a("p",[e._v("Related functions:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("ensure_can_withdraw")]),e._v(" is always called internally but has a bounded complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Transferring balances to accounts that did not exist before will cause     "),a("code",[e._v("T::OnNewAccount::on_new_account")]),e._v(" to be called.")])]),e._v(" "),a("li",[a("p",[e._v("Removing enough funds from an account will trigger "),a("code",[e._v("T::DustRemoval::on_unbalanced")]),e._v(".")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("transfer_keep_alive")]),e._v(" works the same way as "),a("code",[e._v("transfer")]),e._v(", but has an additional    check that the transfer will not kill the origin account.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"transferkeepalive-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transferkeepalive-dest-t-lookup-as-staticlookup-source-value-compact-t-balance"}},[e._v("#")]),e._v(" transferKeepAlive(dest: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", value: "),a("code",[e._v("Compact<T::Balance>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.balances.transferKeepAlive")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Same as the "),a("RouterLink",{attrs:{to:"/substrate/struct.Module.html#method.transfer"}},[a("code",[e._v("transfer")])]),e._v(" call, but with a check that the transfer will not kill the origin account.")],1),e._v(" "),a("p",[e._v("99% of the time you want "),a("RouterLink",{attrs:{to:"/substrate/struct.Module.html#method.transfer"}},[a("code",[e._v("transfer")])]),e._v(" instead.")],1)])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"contracts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contracts"}},[e._v("#")]),e._v(" contracts")]),e._v(" "),a("h3",{attrs:{id:"call-dest-t-lookup-as-staticlookup-source-value-compact-balanceof-t-gas-limit-compact-gas-data-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-dest-t-lookup-as-staticlookup-source-value-compact-balanceof-t-gas-limit-compact-gas-data-vec-u8"}},[e._v("#")]),e._v(" call(dest: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(", gas_limit: "),a("code",[e._v("Compact<Gas>")]),e._v(", data: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.contracts.call")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Makes a call to an account, optionally transferring some balance.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("If the account is a smart-contract account, the associated code will be executed and any value will be transferred.")])]),e._v(" "),a("li",[a("p",[e._v("If the account is a regular account, any value will be transferred.")])]),e._v(" "),a("li",[a("p",[e._v("If no account exists and the call value is not less than "),a("code",[e._v("existential_deposit")]),e._v(",a regular account will be created and any value will be transferred.")])])])])]),e._v(" "),a("h3",{attrs:{id:"claimsurcharge-dest-t-accountid-aux-sender-option-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#claimsurcharge-dest-t-accountid-aux-sender-option-t-accountid"}},[e._v("#")]),e._v(" claimSurcharge(dest: "),a("code",[e._v("T::AccountId")]),e._v(", aux_sender: "),a("code",[e._v("Option<T::AccountId>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.contracts.claimSurcharge")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allows block producers to claim a small reward for evicting a contract. If a block producer fails to do so, a regular users will be allowed to claim the reward.")]),e._v(" "),a("p",[e._v("If contract is not evicted as a result of this call, no actions are taken and the sender is not eligible for the reward.")])])]),e._v(" "),a("h3",{attrs:{id:"instantiate-endowment-compact-balanceof-t-gas-limit-compact-gas-code-hash-codehash-t-data-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instantiate-endowment-compact-balanceof-t-gas-limit-compact-gas-code-hash-codehash-t-data-vec-u8"}},[e._v("#")]),e._v(" instantiate(endowment: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(", gas_limit: "),a("code",[e._v("Compact<Gas>")]),e._v(", code_hash: "),a("code",[e._v("CodeHash<T>")]),e._v(", data: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.contracts.instantiate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Instantiates a new contract from the "),a("code",[e._v("codehash")]),e._v(" generated by "),a("code",[e._v("put_code")]),e._v(", optionally transferring some balance.")]),e._v(" "),a("p",[e._v("Instantiation is executed as follows:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("The destination address is computed based on the sender and hash of the code.")])]),e._v(" "),a("li",[a("p",[e._v("The smart-contract account is created at the computed address.")])]),e._v(" "),a("li",[a("p",[e._v("The "),a("code",[e._v("ctor_code")]),e._v(" is executed in the context of the newly-created account. Buffer returned  after the execution is saved as the "),a("code",[e._v("code")]),e._v(" of the account. That code will be invoked   upon any call received by this account.")])]),e._v(" "),a("li",[a("p",[e._v("The contract is initialized.")])])])])]),e._v(" "),a("h3",{attrs:{id:"putcode-gas-limit-compact-gas-code-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#putcode-gas-limit-compact-gas-code-vec-u8"}},[e._v("#")]),e._v(" putCode(gas_limit: "),a("code",[e._v("Compact<Gas>")]),e._v(", code: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.contracts.putCode")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Stores the given binary Wasm code into the chain's storage and returns its "),a("code",[e._v("codehash")]),e._v(". You can instantiate contracts only with stored code.")])]),e._v(" "),a("h3",{attrs:{id:"updateschedule-schedule-schedule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updateschedule-schedule-schedule"}},[e._v("#")]),e._v(" updateSchedule(schedule: "),a("code",[e._v("Schedule")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.contracts.updateSchedule")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Updates the schedule for metering contracts.")]),e._v(" "),a("p",[e._v("The schedule must have a greater version than the stored schedule.")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"council"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#council"}},[e._v("#")]),e._v(" council")]),e._v(" "),a("h3",{attrs:{id:"execute-proposal-box-t-as-trait-i-proposal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execute-proposal-box-t-as-trait-i-proposal"}},[e._v("#")]),e._v(" execute(proposal: "),a("code",[e._v("Box<<T as Trait<I>>::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.council.execute")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Dispatch a proposal from a member using the "),a("code",[e._v("Member")]),e._v(" origin.")]),e._v(" "),a("p",[e._v("Origin must be a member of the collective.")])])]),e._v(" "),a("h3",{attrs:{id:"propose-threshold-compact-membercount-proposal-box-t-as-trait-i-proposal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#propose-threshold-compact-membercount-proposal-box-t-as-trait-i-proposal"}},[e._v("#")]),e._v(" propose(threshold: "),a("code",[e._v("Compact<MemberCount>")]),e._v(", proposal: "),a("code",[e._v("Box<<T as Trait<I>>::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.council.propose")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   # <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Bounded storage reads and writes.")])]),e._v(" "),a("li",[a("p",[e._v("Argument "),a("code",[e._v("threshold")]),e._v(" has bearing on weight.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setmembers-new-members-vec-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setmembers-new-members-vec-t-accountid"}},[e._v("#")]),e._v(" setMembers(new_members: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.council.setMembers")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the collective's membership manually to "),a("code",[e._v("new_members")]),e._v(". Be nice to the chain and provide it pre-sorted.")]),e._v(" "),a("p",[e._v("Requires root origin.")])])]),e._v(" "),a("h3",{attrs:{id:"vote-proposal-t-hash-index-compact-proposalindex-approve-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-proposal-t-hash-index-compact-proposalindex-approve-bool"}},[e._v("#")]),e._v(" vote(proposal: "),a("code",[e._v("T::Hash")]),e._v(", index: "),a("code",[e._v("Compact<ProposalIndex>")]),e._v(", approve: "),a("code",[e._v("bool")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.council.vote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   # <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Bounded storage read and writes.")])]),e._v(" "),a("li",[a("p",[e._v("Will be slightly heavier if the proposal is approved / disapproved after the vote.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"democracy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#democracy"}},[e._v("#")]),e._v(" democracy")]),e._v(" "),a("h3",{attrs:{id:"cancelqueued-which-referendumindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cancelqueued-which-referendumindex"}},[e._v("#")]),e._v(" cancelQueued(which: "),a("code",[e._v("ReferendumIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.cancelQueued")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Cancel a proposal queued for enactment.")])]),e._v(" "),a("h3",{attrs:{id:"cancelreferendum-ref-index-compact-referendumindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cancelreferendum-ref-index-compact-referendumindex"}},[e._v("#")]),e._v(" cancelReferendum(ref_index: "),a("code",[e._v("Compact<ReferendumIndex>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.cancelReferendum")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Remove a referendum.")])]),e._v(" "),a("h3",{attrs:{id:"clearpublicproposals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clearpublicproposals"}},[e._v("#")]),e._v(" clearPublicProposals()")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.clearPublicProposals")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Veto and blacklist the proposal hash. Must be from Root origin.")])]),e._v(" "),a("h3",{attrs:{id:"delegate-to-t-accountid-conviction-conviction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delegate-to-t-accountid-conviction-conviction"}},[e._v("#")]),e._v(" delegate(to: "),a("code",[e._v("T::AccountId")]),e._v(", conviction: "),a("code",[e._v("Conviction")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.delegate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Delegate vote.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One extra DB entry.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"emergencycancel-ref-index-referendumindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emergencycancel-ref-index-referendumindex"}},[e._v("#")]),e._v(" emergencyCancel(ref_index: "),a("code",[e._v("ReferendumIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.emergencyCancel")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Schedule an emergency cancellation of a referendum. Cannot happen twice to the same referendum.")])]),e._v(" "),a("h3",{attrs:{id:"externalpropose-proposal-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#externalpropose-proposal-hash-t-hash"}},[e._v("#")]),e._v(" externalPropose(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.externalPropose")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Schedule a referendum to be tabled once it is legal to schedule an external referendum.")])]),e._v(" "),a("h3",{attrs:{id:"externalproposedefault-proposal-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#externalproposedefault-proposal-hash-t-hash"}},[e._v("#")]),e._v(" externalProposeDefault(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.externalProposeDefault")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Schedule a negative-turnout-bias referendum to be tabled next once it is legal to schedule an external referendum.")]),e._v(" "),a("p",[e._v("Unlike "),a("code",[e._v("external_propose")]),e._v(", blacklisting has no effect on this and it may replace a pre-scheduled "),a("code",[e._v("external_propose")]),e._v(" call.")])])]),e._v(" "),a("h3",{attrs:{id:"externalproposemajority-proposal-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#externalproposemajority-proposal-hash-t-hash"}},[e._v("#")]),e._v(" externalProposeMajority(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.externalProposeMajority")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Schedule a majority-carries referendum to be tabled next once it is legal to schedule an external referendum.")]),e._v(" "),a("p",[e._v("Unlike "),a("code",[e._v("external_propose")]),e._v(", blacklisting has no effect on this and it may replace a pre-scheduled "),a("code",[e._v("external_propose")]),e._v(" call.")])])]),e._v(" "),a("h3",{attrs:{id:"fasttrack-proposal-hash-t-hash-voting-period-t-blocknumber-delay-t-blocknumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fasttrack-proposal-hash-t-hash-voting-period-t-blocknumber-delay-t-blocknumber"}},[e._v("#")]),e._v(" fastTrack(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(", voting_period: "),a("code",[e._v("T::BlockNumber")]),e._v(", delay: "),a("code",[e._v("T::BlockNumber")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.fastTrack")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Schedule the currently externally-proposed majority-carries referendum to be tabled immediately. If there is no externally-proposed referendum currently, or if there is one but it is not a majority-carries referendum then it fails.")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("proposal_hash")]),e._v(": The hash of the current external proposal.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("voting_period")]),e._v(": The period that is allowed for voting on this proposal. Increased to  "),a("code",[e._v("EmergencyVotingPeriod")]),e._v(" if too low.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("delay")]),e._v(": The number of block after voting has ended in approval and this should be  enacted. This doesn't have a minimum amount.")])])])])]),e._v(" "),a("h3",{attrs:{id:"noteimminentpreimage-encoded-proposal-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#noteimminentpreimage-encoded-proposal-vec-u8"}},[e._v("#")]),e._v(" noteImminentPreimage(encoded_proposal: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.noteImminentPreimage")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Register the preimage for an upcoming proposal. This requires the proposal to be in the dispatch queue. No deposit is needed.")])]),e._v(" "),a("h3",{attrs:{id:"notepreimage-encoded-proposal-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notepreimage-encoded-proposal-vec-u8"}},[e._v("#")]),e._v(" notePreimage(encoded_proposal: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.notePreimage")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Register the preimage for an upcoming proposal. This doesn't require the proposal to be in the dispatch queue but does require a deposit, returned once enacted.")])]),e._v(" "),a("h3",{attrs:{id:"propose-proposal-hash-t-hash-value-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#propose-proposal-hash-t-hash-value-compact-balanceof-t"}},[e._v("#")]),e._v(" propose(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(", value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.propose")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Propose a sensitive action to be taken.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Two DB changes, one DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"proxyvote-ref-index-compact-referendumindex-vote-vote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxyvote-ref-index-compact-referendumindex-vote-vote"}},[e._v("#")]),e._v(" proxyVote(ref_index: "),a("code",[e._v("Compact<ReferendumIndex>")]),e._v(", vote: "),a("code",[e._v("Vote")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.proxyVote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Vote in a referendum on behalf of a stash. If "),a("code",[e._v("vote.is_aye()")]),e._v(", the vote is to enact the proposal; otherwise it is a vote to keep the status quo.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One DB change, one DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"reappreimage-proposal-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reappreimage-proposal-hash-t-hash"}},[e._v("#")]),e._v(" reapPreimage(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.reapPreimage")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove an expired proposal preimage and collect the deposit.")]),e._v(" "),a("p",[e._v("This will only work after "),a("code",[e._v("VotingPeriod")]),e._v(" blocks from the time that the preimage was noted, if it's the same account doing it. If it's a different account, then it'll only work an additional "),a("code",[e._v("EnactmentPeriod")]),e._v(" later.")])])]),e._v(" "),a("h3",{attrs:{id:"removeproxy-proxy-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeproxy-proxy-t-accountid"}},[e._v("#")]),e._v(" removeProxy(proxy: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.removeProxy")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Clear the proxy. Called by the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One DB clear.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"resignproxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resignproxy"}},[e._v("#")]),e._v(" resignProxy()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.resignProxy")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Clear the proxy. Called by the proxy.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One DB clear.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"second-proposal-compact-propindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#second-proposal-compact-propindex"}},[e._v("#")]),e._v(" second(proposal: "),a("code",[e._v("Compact<PropIndex>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.second")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Propose a sensitive action to be taken.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setproxy-proxy-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setproxy-proxy-t-accountid"}},[e._v("#")]),e._v(" setProxy(proxy: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.setProxy")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Specify a proxy. Called by the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One extra DB entry.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"undelegate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undelegate"}},[e._v("#")]),e._v(" undelegate()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.undelegate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Undelegate vote.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("O(1).")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"unlock-target-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unlock-target-t-accountid"}},[e._v("#")]),e._v(" unlock(target: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.unlock")])]),e._v(" "),a("h3",{attrs:{id:"vetoexternal-proposal-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vetoexternal-proposal-hash-t-hash"}},[e._v("#")]),e._v(" vetoExternal(proposal_hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.vetoExternal")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Veto and blacklist the external proposal hash.")])]),e._v(" "),a("h3",{attrs:{id:"vote-ref-index-compact-referendumindex-vote-vote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-ref-index-compact-referendumindex-vote-vote"}},[e._v("#")]),e._v(" vote(ref_index: "),a("code",[e._v("Compact<ReferendumIndex>")]),e._v(", vote: "),a("code",[e._v("Vote")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.democracy.vote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Vote in a referendum. If "),a("code",[e._v("vote.is_aye()")]),e._v(", the vote is to enact the proposal; otherwise it is a vote to keep the status quo.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One DB change, one DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"elections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elections"}},[e._v("#")]),e._v(" elections")]),e._v(" "),a("h3",{attrs:{id:"removemember-who-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removemember-who-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" removeMember(who: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.removeMember")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove a particular member from the set. This is effective immediately and the bond of the outgoing member is slashed.")]),e._v(" "),a("p",[e._v("If a runner-up is available, then the best runner-up will be removed and replaces the outgoing member. Otherwise, a new phragmen round is started.")]),e._v(" "),a("p",[e._v("Note that this does not affect the designated block number of the next election.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("h4",{attrs:{id:"state-reads-o-do-phragmen-writes-o-do-phragmen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reads-o-do-phragmen-writes-o-do-phragmen"}},[e._v("#")]),e._v(" State Reads: O(do_phragmen) Writes: O(do_phragmen)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"removevoter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removevoter"}},[e._v("#")]),e._v(" removeVoter()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.removeVoter")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove "),a("code",[e._v("origin")]),e._v(" as a voter. This removes the lock and returns the bond.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("h4",{attrs:{id:"state-reads-o-1-writes-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reads-o-1-writes-o-1"}},[e._v("#")]),e._v(" State Reads: O(1) Writes: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"renouncecandidacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renouncecandidacy"}},[e._v("#")]),e._v(" renounceCandidacy()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.renounceCandidacy")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Renounce one's intention to be a candidate for the next election round. 3 potential outcomes exist:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("origin")]),e._v(" is a candidate and not elected in any set. In this case, the bond is  unreserved, returned and origin is removed as a candidate.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("origin")]),e._v(" is a current runner up. In this case, the bond is unreserved, returned and  origin is removed as a runner.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("origin")]),e._v(" is a current member. In this case, the bond is unreserved and origin is  removed as a member, consequently not being a candidate for the next round anymore.   Similar to ["),a("code",[e._v("remove_voter")]),e._v("], if replacement runners exists, they are immediately used.")])])])])]),e._v(" "),a("h3",{attrs:{id:"reportdefunctvoter-target-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reportdefunctvoter-target-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" reportDefunctVoter(target: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.reportDefunctVoter")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Report "),a("code",[e._v("target")]),e._v(" for being an defunct voter. In case of a valid report, the reporter is rewarded by the bond amount of "),a("code",[e._v("target")]),e._v(". Otherwise, the reporter itself is removed and their bond is slashed.")]),e._v(" "),a("p",[e._v("A defunct voter is defined to be:")]),e._v(" "),a("ul",[a("li",[e._v("a voter whose current submitted votes are all invalid. i.e. all of them are no    longer a candidate nor an active member.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("h4",{attrs:{id:"state-reads-o-nlogm-given-m-current-candidates-and-n-votes-for-target-writes-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reads-o-nlogm-given-m-current-candidates-and-n-votes-for-target-writes-o-1"}},[e._v("#")]),e._v(" State Reads: O(NLogM) given M current candidates and N votes for "),a("code",[e._v("target")]),e._v(". Writes: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"submitcandidacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#submitcandidacy"}},[e._v("#")]),e._v(" submitCandidacy()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.submitCandidacy")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Submit oneself for candidacy.")]),e._v(" "),a("p",[e._v("A candidate will either:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Lose at the end of the term and forfeit their deposit.")])]),e._v(" "),a("li",[a("p",[e._v("Win and become a member. Members will eventually get their stash back.")])]),e._v(" "),a("li",[a("p",[e._v("Become a runner-up. Runners-ups are reserved members in case one gets forcefully    removed.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("h4",{attrs:{id:"state-reads-o-logn-given-n-candidates-writes-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reads-o-logn-given-n-candidates-writes-o-1"}},[e._v("#")]),e._v(" State Reads: O(LogN) Given N candidates. Writes: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"vote-votes-vec-t-accountid-value-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-votes-vec-t-accountid-value-compact-balanceof-t"}},[e._v("#")]),e._v(" vote(votes: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(", value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.elections.vote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Vote for a set of candidates for the upcoming round of election.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("votes")]),e._v(" should:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("not be empty.")])]),e._v(" "),a("li",[a("p",[e._v("be less than the number of candidates.")])])]),e._v(" "),a("p",[e._v("Upon voting, "),a("code",[e._v("value")]),e._v(" units of "),a("code",[e._v("who")]),e._v("'s balance is locked and a bond amount is reserved. It is the responsibility of the caller to not place all of their balance into the lock and keep some for further transactions.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("h4",{attrs:{id:"state-reads-o-1-writes-o-v-given-v-votes-v-is-bounded-by-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reads-o-1-writes-o-v-given-v-votes-v-is-bounded-by-16"}},[e._v("#")]),e._v(" State Reads: O(1) Writes: O(V) given "),a("code",[e._v("V")]),e._v(" votes. V is bounded by 16.")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"finalitytracker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finalitytracker"}},[e._v("#")]),e._v(" finalityTracker")]),e._v(" "),a("h3",{attrs:{id:"finalhint-hint-compact-t-blocknumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finalhint-hint-compact-t-blocknumber"}},[e._v("#")]),e._v(" finalHint(hint: "),a("code",[e._v("Compact<T::BlockNumber>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.finalityTracker.finalHint")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Hint that the author of this block thinks the best finalized block is the given number.")])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"grandpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grandpa"}},[e._v("#")]),e._v(" grandpa")]),e._v(" "),a("h3",{attrs:{id:"reportmisbehavior-report-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reportmisbehavior-report-vec-u8"}},[e._v("#")]),e._v(" reportMisbehavior(_report: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.grandpa.reportMisbehavior")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Report some misbehavior.")])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"identity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identity"}},[e._v("#")]),e._v(" identity")]),e._v(" "),a("h3",{attrs:{id:"addregistrar-account-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addregistrar-account-t-accountid"}},[e._v("#")]),e._v(" addRegistrar(account: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.addRegistrar")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Add a registrar to the system.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("code",[e._v("RegistrarOrigin")]),e._v(" or "),a("code",[e._v("Root")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("account")]),e._v(": the account of the registrar.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("RegistrarAdded")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R)")]),e._v(" where "),a("code",[e._v("R")]),e._v(" registrar-count (governance-bounded).")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(R)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"cancelrequest-reg-index-registrarindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cancelrequest-reg-index-registrarindex"}},[e._v("#")]),e._v(" cancelRequest(reg_index: "),a("code",[e._v("RegistrarIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.cancelRequest")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Cancel a previous request.")]),e._v(" "),a("p",[e._v("Payment: A previously reserved deposit is returned on success.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have a registered identity.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("reg_index")]),e._v(": The index of the registrar whose judgement is no longer requested.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("JudgementUnrequested")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-reserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation "),a("code",[e._v("O(R + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"clearidentity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clearidentity"}},[e._v("#")]),e._v(" clearIdentity()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.clearIdentity")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Clear an account's identity info and all sub-account and return all deposits.")]),e._v(" "),a("p",[e._v("Payment: All reserved balances on the account are returned.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have a registered identity.")]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IdentityCleared")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + S + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-reserve operation.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("S + 2")]),e._v(" storage deletions.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"killidentity-target-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killidentity-target-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" killIdentity(target: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.killIdentity")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove an account's identity and sub-account information and slash the deposits.")]),e._v(" "),a("p",[e._v("Payment: Reserved balances from "),a("code",[e._v("set_subs")]),e._v(" and "),a("code",[e._v("set_identity")]),e._v(" are slashed and handled by "),a("code",[e._v("Slash")]),e._v(". Verification request deposits are not returned; they should be cancelled manually using "),a("code",[e._v("cancel_request")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Root")]),e._v(" or match "),a("code",[e._v("T::ForceOrigin")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("target")]),e._v(": the account whose identity the judgement is upon. This must be an account   with a registered identity.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IdentityKilled")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + S + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-reserve operation.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("S + 2")]),e._v(" storage mutations.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"providejudgement-reg-index-compact-registrarindex-target-t-lookup-as-staticlookup-source-judgement-judgement-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#providejudgement-reg-index-compact-registrarindex-target-t-lookup-as-staticlookup-source-judgement-judgement-balanceof-t"}},[e._v("#")]),e._v(" provideJudgement(reg_index: "),a("code",[e._v("Compact<RegistrarIndex>")]),e._v(", target: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", judgement: "),a("code",[e._v("Judgement<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.provideJudgement")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Provide a judgement for an account's identity.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must be the account of the registrar whose index is "),a("code",[e._v("reg_index")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("reg_index")]),e._v(": the index of the registrar whose judgement is being made.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("target")]),e._v(": the account whose identity the judgement is upon. This must be an account  with a registered identity.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("judgement")]),e._v(": the judgement of the registrar of index "),a("code",[e._v("reg_index")]),e._v(" about "),a("code",[e._v("target")]),e._v(".")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("JudgementGiven")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-transfer operation.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one account-lookup operation.")])]),e._v(" "),a("li",[a("p",[e._v("Storage: 1 read "),a("code",[e._v("O(R)")]),e._v(", 1 mutate "),a("code",[e._v("O(R + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"requestjudgement-reg-index-compact-registrarindex-max-fee-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestjudgement-reg-index-compact-registrarindex-max-fee-compact-balanceof-t"}},[e._v("#")]),e._v(" requestJudgement(reg_index: "),a("code",[e._v("Compact<RegistrarIndex>")]),e._v(", max_fee: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.requestJudgement")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Request a judgement from a registrar.")]),e._v(" "),a("p",[e._v("Payment: At most "),a("code",[e._v("max_fee")]),e._v(" will be reserved for payment to the registrar if judgement given.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have a registered identity.")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("reg_index")]),e._v(": The index of the registrar whose judgement is requested.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("max_fee")]),e._v(": The maximum fee that may be paid. This should just be auto-populated as:")])])]),e._v(" "),a("p",[a("code",[e._v("nocompile Self::registrars(reg_index).uwnrap().fee")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("JudgementRequested")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + X)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-reserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("Storage: 1 read "),a("code",[e._v("O(R)")]),e._v(", 1 mutate "),a("code",[e._v("O(X + R)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setaccountid-index-compact-registrarindex-new-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setaccountid-index-compact-registrarindex-new-t-accountid"}},[e._v("#")]),e._v(" setAccountId(index: "),a("code",[e._v("Compact<RegistrarIndex>")]),e._v(", new: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.setAccountId")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Change the account associated with a registrar.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must be the account of the registrar whose index is "),a("code",[e._v("index")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("index")]),e._v(": the index of the registrar whose fee is to be set.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("new")]),e._v(": the new account ID.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation "),a("code",[e._v("O(R)")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setfee-index-compact-registrarindex-fee-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setfee-index-compact-registrarindex-fee-compact-balanceof-t"}},[e._v("#")]),e._v(" setFee(index: "),a("code",[e._v("Compact<RegistrarIndex>")]),e._v(", fee: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.setFee")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the fee required for a judgement to be requested from a registrar.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must be the account of the registrar whose index is "),a("code",[e._v("index")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("index")]),e._v(": the index of the registrar whose fee is to be set.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("fee")]),e._v(": the new fee.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation "),a("code",[e._v("O(R)")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setfields-index-compact-registrarindex-fields-identityfields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setfields-index-compact-registrarindex-fields-identityfields"}},[e._v("#")]),e._v(" setFields(index: "),a("code",[e._v("Compact<RegistrarIndex>")]),e._v(", fields: "),a("code",[e._v("IdentityFields")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.setFields")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the field information for a registrar.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must be the account of the registrar whose index is "),a("code",[e._v("index")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("index")]),e._v(": the index of the registrar whose fee is to be set.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("fields")]),e._v(": the fields that the registrar concerns themselves with.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation "),a("code",[e._v("O(R)")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setidentity-info-identityinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setidentity-info-identityinfo"}},[e._v("#")]),e._v(" setIdentity(info: "),a("code",[e._v("IdentityInfo")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.setIdentity")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set an account's identity information and reserve the appropriate deposit.")]),e._v(" "),a("p",[e._v("If the account already has identity information, the deposit is taken as part payment for the new deposit.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have a registered identity.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("info")]),e._v(": The identity information.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IdentitySet")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(X + X' + R)")]),e._v(" where "),a("code",[e._v("X")]),e._v(" additional-field-count (deposit-bounded and code-bounded).")])]),e._v(" "),a("li",[a("p",[e._v("At most two balance operations.")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec-read "),a("code",[e._v("O(X' + R)")]),e._v(", codec-write "),a("code",[e._v("O(X + R)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setsubs-subs-vec-t-accountid-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setsubs-subs-vec-t-accountid-data"}},[e._v("#")]),e._v(" setSubs(subs: "),a("code",[e._v("Vec<(T::AccountId, Data)>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.identity.setSubs")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the sub-accounts of the sender.")]),e._v(" "),a("p",[e._v("Payment: Any aggregate balance reserved by previous "),a("code",[e._v("set_subs")]),e._v(" calls will be returned and an amount "),a("code",[e._v("SubAccountDeposit")]),e._v(" will be reserved for each item in "),a("code",[e._v("subs")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have a registered identity.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("subs")]),e._v(": The identity's sub-accounts.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(S)")]),e._v(" where "),a("code",[e._v("S")]),e._v(" subs-count (hard- and deposit-bounded).")])]),e._v(" "),a("li",[a("p",[e._v("At most two balance operations.")])]),e._v(" "),a("li",[a("p",[e._v("At most O(2 * S + 1) storage mutations; codec complexity "),a("code",[e._v("O(1 * S + S * 1)")]),e._v(");  one storage-exists.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"imonline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imonline"}},[e._v("#")]),e._v(" imOnline")]),e._v(" "),a("h3",{attrs:{id:"heartbeat-heartbeat-heartbeat-t-blocknumber-signature-t-authorityid-as-runtimeapppublic-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heartbeat-heartbeat-heartbeat-t-blocknumber-signature-t-authorityid-as-runtimeapppublic-signature"}},[e._v("#")]),e._v(" heartbeat(heartbeat: "),a("code",[e._v("Heartbeat<T::BlockNumber>")]),e._v(", _signature: "),a("code",[e._v("<T::AuthorityId as RuntimeAppPublic>::Signature")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.imOnline.heartbeat")])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"indices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indices"}},[e._v("#")]),e._v(" indices")]),e._v(" "),a("h3",{attrs:{id:"claim-index-t-accountindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#claim-index-t-accountindex"}},[e._v("#")]),e._v(" claim(index: "),a("code",[e._v("T::AccountIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.indices.claim")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Assign an previously unassigned index.")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("Deposit")]),e._v(" is reserved from the sender account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("index")]),e._v(": the index to be claimed. This must not be in use.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IndexAssigned")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(1)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One reserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"forcetransfer-new-t-accountid-index-t-accountindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forcetransfer-new-t-accountid-index-t-accountindex"}},[e._v("#")]),e._v(" forceTransfer(new: "),a("code",[e._v("T::AccountId")]),e._v(", index: "),a("code",[e._v("T::AccountIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.indices.forceTransfer")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Force an index to an account. This doesn't require a deposit. If the index is already held, then any deposit is reimbursed to its current owner.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Root")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("index")]),e._v(": the index to be (re-)assigned.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("new")]),e._v(": the new owner of the index. This function is a no-op if it is equal to sender.")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IndexAssigned")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(1)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("Up to one reserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"free-index-t-accountindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#free-index-t-accountindex"}},[e._v("#")]),e._v(" free(index: "),a("code",[e._v("T::AccountIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.indices.free")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Free up an index owned by the sender.")]),e._v(" "),a("p",[e._v("Payment: Any previous deposit placed for the index is unreserved in the sender account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must own the index.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("index")]),e._v(": the index to be freed. This must be owned by the sender.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IndexFreed")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(1)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One reserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"transfer-new-t-accountid-index-t-accountindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-new-t-accountid-index-t-accountindex"}},[e._v("#")]),e._v(" transfer(new: "),a("code",[e._v("T::AccountId")]),e._v(", index: "),a("code",[e._v("T::AccountIndex")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.indices.transfer")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Assign an index already owned by the sender to another account. The balance reservation is effectively transfered to the new account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("index")]),e._v(": the index to be re-assigned. This must be owned by the sender.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("new")]),e._v(": the new owner of the index. This function is a no-op if it is equal to sender.")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("IndexAssigned")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(1)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One transfer operation.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"recovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recovery"}},[e._v("#")]),e._v(" recovery")]),e._v(" "),a("h3",{attrs:{id:"asrecovered-account-t-accountid-call-box-t-as-trait-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asrecovered-account-t-accountid-call-box-t-as-trait-call"}},[e._v("#")]),e._v(" asRecovered(account: "),a("code",[e._v("T::AccountId")]),e._v(", call: "),a("code",[e._v("Box<<T as Trait>::Call>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.asRecovered")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Send a call through a recovered account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and registered to be able to make calls on behalf of the recovered account.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("account")]),e._v(": The recovered account you want to make a call on-behalf-of.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("call")]),e._v(": The call you want to make with the recovered account.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("The weight of the "),a("code",[e._v("call")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One storage lookup to check account is recovered by "),a("code",[e._v("who")]),e._v(". O(1)")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"claimrecovery-account-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#claimrecovery-account-t-accountid"}},[e._v("#")]),e._v(" claimRecovery(account: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.claimRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allow a successful rescuer to claim their recovered account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(' and must be a "rescuer" who has successfully completed the account recovery process: collected '),a("code",[e._v("threshold")]),e._v(" or more vouches, waited "),a("code",[e._v("delay_period")]),e._v(" blocks since initiation.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("account")]),e._v(": The lost account that you want to claim has been successfully  recovered by you.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: F (len of friends in config), V (len of vouching friends)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to get the recovery configuration. O(1), Codec O(F)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get the active recovery process. O(1), Codec O(V)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get the current block number. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write. O(1), Codec O(V).")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(F + V)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"closerecovery-rescuer-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closerecovery-rescuer-t-accountid"}},[e._v("#")]),e._v(" closeRecovery(rescuer: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.closeRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   As the controller of a recoverable account, close an active recovery process for your account.")]),e._v(" "),a("p",[e._v("Payment: By calling this function, the recoverable account will receive the recovery deposit "),a("code",[e._v("RecoveryDeposit")]),e._v(" placed by the rescuer.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and must be a recoverable account with an active recovery process for it.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("rescuer")]),e._v(": The account trying to rescue this recoverable account.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: V (len of vouching friends)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read/remove to get the active recovery process. O(1), Codec O(V)")])]),e._v(" "),a("li",[a("p",[e._v("One balance call to repatriate reserved. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(V + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"createrecovery-friends-vec-t-accountid-threshold-u16-delay-period-t-blocknumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createrecovery-friends-vec-t-accountid-threshold-u16-delay-period-t-blocknumber"}},[e._v("#")]),e._v(" createRecovery(friends: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(", threshold: "),a("code",[e._v("u16")]),e._v(", delay_period: "),a("code",[e._v("T::BlockNumber")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.createRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Create a recovery configuration for your account. This makes your account recoverable.")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("ConfigDepositBase")]),e._v(" + "),a("code",[e._v("FriendDepositFactor")]),e._v(" * #_of_friends balance will be reserved for storing the recovery configuration. This deposit is returned in full when the user calls "),a("code",[e._v("remove_recovery")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("friends")]),e._v(": A list of friends you trust to vouch for recovery attempts.  Should be ordered and contain no duplicate values.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("threshold")]),e._v(": The number of friends that must vouch for a recovery attempt  before the account can be recovered. Should be less than or equal to   the length of the list of friends.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("delay_period")]),e._v(": The number of blocks after a recovery attempt is initialized  that needs to pass before the account can be recovered.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Key: F (len of friends)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check that account is not already recoverable. O(1).")])]),e._v(" "),a("li",[a("p",[e._v("A check that the friends list is sorted and unique. O(F)")])]),e._v(" "),a("li",[a("p",[e._v("One currency reserve operation. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write. O(1). Codec O(F).")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(F + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"initiaterecovery-account-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initiaterecovery-account-t-accountid"}},[e._v("#")]),e._v(" initiateRecovery(account: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.initiateRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Initiate the process for recovering a recoverable account.")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("RecoveryDeposit")]),e._v(" balance will be reserved for initiating the recovery process. This deposit will always be repatriated to the account trying to be recovered. See "),a("code",[e._v("close_recovery")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("account")]),e._v(": The lost account that you want to recover. This account  needs to be recoverable (i.e. have a recovery configuration).")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to check that account is recoverable. O(F)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check that this recovery process hasn't already started. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One currency reserve operation. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get the current block number. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write. O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(F + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"removerecovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removerecovery"}},[e._v("#")]),e._v(" removeRecovery()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.removeRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove the recovery process for your account.")]),e._v(" "),a("p",[e._v("NOTE: The user must make sure to call "),a("code",[e._v("close_recovery")]),e._v(" on all active recovery attempts before calling this function else it will fail.")]),e._v(" "),a("p",[e._v("Payment: By calling this function the recoverable account will unreserve their recovery configuration deposit. ("),a("code",[e._v("ConfigDepositBase")]),e._v(" + "),a("code",[e._v("FriendDepositFactor")]),e._v(" * #_of_friends)")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and must be a recoverable account (i.e. has a recovery configuration).")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: F (len of friends)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to get the prefix iterator for active recoveries. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read/remove to get the recovery configuration. O(1), Codec O(F)")])]),e._v(" "),a("li",[a("p",[e._v("One balance call to unreserved. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(F + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setrecovered-lost-t-accountid-rescuer-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setrecovered-lost-t-accountid-rescuer-t-accountid"}},[e._v("#")]),e._v(" setRecovered(lost: "),a("code",[e._v("T::AccountId")]),e._v(", rescuer: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.setRecovered")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allow ROOT to bypass the recovery process and set an a rescuer account for a lost account directly.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("ROOT")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("lost")]),e._v(': The "lost account" to be recovered.')])]),e._v(" "),a("li",[a("p",[a("code",[e._v("rescuer")]),e._v(': The "rescuer account" which can call as the lost account.')])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage write O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"vouchrecovery-lost-t-accountid-rescuer-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vouchrecovery-lost-t-accountid-rescuer-t-accountid"}},[e._v("#")]),e._v(" vouchRecovery(lost: "),a("code",[e._v("T::AccountId")]),e._v(", rescuer: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.recovery.vouchRecovery")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(':   Allow a "friend" of a recoverable account to vouch for an active recovery process for that account.')]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(' and must be a "friend" for the recoverable account.')]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("lost")]),e._v(": The lost account that you want to recover.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("rescuer")]),e._v(": The account trying to rescue the lost account that you  want to vouch for.")])])]),e._v(" "),a("p",[e._v("The combination of these two parameters must point to an active recovery process.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: F (len of friends in config), V (len of vouching friends)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to get the recovery configuration. O(1), Codec O(F)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get the active recovery process. O(1), Codec O(V)")])]),e._v(" "),a("li",[a("p",[e._v("One binary search to confirm caller is a friend. O(logF)")])]),e._v(" "),a("li",[a("p",[e._v("One binary search to confirm caller has not already vouched. O(logV)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write. O(1), Codec O(V).")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(F + logF + V + logV)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[e._v("#")]),e._v(" session")]),e._v(" "),a("h3",{attrs:{id:"setkeys-keys-t-keys-proof-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setkeys-keys-t-keys-proof-vec-u8"}},[e._v("#")]),e._v(" setKeys(keys: "),a("code",[e._v("T::Keys")]),e._v(", proof: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.session.setKeys")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Sets the session key(s) of the function caller to "),a("code",[e._v("keys")]),e._v(". Allows an account to set its session key prior to becoming a validator. This doesn't take effect until the next session.")]),e._v(" "),a("p",[e._v("The dispatch origin of this function must be signed.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(log n) in number of accounts.")])]),e._v(" "),a("li",[a("p",[e._v("One extra DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"society"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#society"}},[e._v("#")]),e._v(" society")]),e._v(" "),a("h3",{attrs:{id:"bid-value-balanceof-t-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bid-value-balanceof-t-i"}},[e._v("#")]),e._v(" bid(value: "),a("code",[e._v("BalanceOf<T, I>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.bid")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   A user outside of the society can make a bid for entry.")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("CandidateDeposit")]),e._v(" will be reserved for making a bid. It is returned when the bid becomes a member, or if the bid calls "),a("code",[e._v("unbid")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("value")]),e._v(": A one time payment the bid would like to receive when joining the society.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Storage Reads:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to check for suspended candidate. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check for suspended member. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to retrieve all current bids. O(B)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to retrieve all current candidates. O(C)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to retrieve all members. O(M)")])])])]),e._v(" "),a("li",[a("p",[e._v("Storage Writes:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)")])])])]),e._v(" "),a("li",[a("p",[e._v("Notable Computation:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(B + C + log M) search to check user is not already a part of society.")])]),e._v(" "),a("li",[a("p",[e._v("O(log B) search to insert the new bid sorted.")])])])]),e._v(" "),a("li",[a("p",[e._v("External Module Operations:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One balance reserve operation. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.")])])])]),e._v(" "),a("li",[a("p",[e._v("Events:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One event for new bid.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.")])])])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + B + C + logM + logB + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"defendervote-approve-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defendervote-approve-bool"}},[e._v("#")]),e._v(" defenderVote(approve: "),a("code",[e._v("bool")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.defenderVote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   As a member, vote on the defender.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a member.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("approve")]),e._v(": A boolean which says if the candidate should beapproved ("),a("code",[e._v("true")]),e._v(") or rejected ("),a("code",[e._v("false")]),e._v(").")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Key: M (len of members)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read O(M) and O(log M) search to check user is a member.")])]),e._v(" "),a("li",[a("p",[e._v("One storage write to add vote to votes. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + logM)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"found-founder-t-accountid-max-members-u32-rules-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#found-founder-t-accountid-max-members-u32-rules-vec-u8"}},[e._v("#")]),e._v(" found(founder: "),a("code",[e._v("T::AccountId")]),e._v(", max_members: "),a("code",[e._v("u32")]),e._v(", rules: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.found")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Found the society.")]),e._v(" "),a("p",[e._v("This is done as a discrete action in order to allow for the module to be included into a running chain and can only be done once.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be from the "),a("em",[e._v("FounderSetOrigin")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("founder")]),e._v(" - The first member and head of the newly founded society.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("max_members")]),e._v(" - The initial max number of members for the society.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("rules")]),e._v(" - The rules of this society concerning membership.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Two storage mutates to set "),a("code",[e._v("Head")]),e._v(" and "),a("code",[e._v("Founder")]),e._v(". O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write to add the first member to society. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"judgesuspendedcandidate-who-t-accountid-judgement-judgement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#judgesuspendedcandidate-who-t-accountid-judgement-judgement"}},[e._v("#")]),e._v(" judgeSuspendedCandidate(who: "),a("code",[e._v("T::AccountId")]),e._v(", judgement: "),a("code",[e._v("Judgement")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.judgeSuspendedCandidate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allow suspended judgement origin to make judgement on a suspended candidate.")]),e._v(" "),a("p",[e._v("If the judgement is "),a("code",[e._v("Approve")]),e._v(", we add them to society as a member with the appropriate payment for joining society.")]),e._v(" "),a("p",[e._v("If the judgement is "),a("code",[e._v("Reject")]),e._v(", we either slash the deposit of the bid, giving it back to the society treasury, or we ban the voucher from vouching again.")]),e._v(" "),a("p",[e._v("If the judgement is "),a("code",[e._v("Rebid")]),e._v(", we put the candidate back in the bid pool and let them go through the induction process again.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be from the "),a("em",[e._v("SuspensionJudgementOrigin")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("who")]),e._v(" - The suspended candidate to be judged.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("judgement")]),e._v(" - "),a("code",[e._v("Approve")]),e._v(", "),a("code",[e._v("Reject")]),e._v(", or "),a("code",[e._v("Rebid")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids), M (len of members), X (balance action)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to check "),a("code",[e._v("who")]),e._v(" is a suspended candidate.")])]),e._v(" "),a("li",[a("p",[e._v("One storage removal of the suspended candidate.")])]),e._v(" "),a("li",[a("p",[e._v("Approve Logic")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to get the available pot to pay users with. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write to update the available pot. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get the current block number. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to get all members. O(M)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one unreserve currency action.")])]),e._v(" "),a("li",[a("p",[e._v("Up to two new storage writes to payouts.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage write with O(log M) binary search to add a member to society.")])])])]),e._v(" "),a("li",[a("p",[e._v("Reject Logic")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Up to one repatriate reserved currency action. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage write to ban the vouching member from vouching again.")])])])]),e._v(" "),a("li",[a("p",[e._v("Rebid Logic")]),e._v(" "),a("ul",[a("li",[e._v("Storage mutate with O(log B) binary search to place the user back into bids.")])])]),e._v(" "),a("li",[a("p",[e._v("Up to one additional event if unvouch takes place.")])]),e._v(" "),a("li",[a("p",[e._v("One storage removal.")])]),e._v(" "),a("li",[a("p",[e._v("One event for the judgement.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + logM + B + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"judgesuspendedmember-who-t-accountid-forgive-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#judgesuspendedmember-who-t-accountid-forgive-bool"}},[e._v("#")]),e._v(" judgeSuspendedMember(who: "),a("code",[e._v("T::AccountId")]),e._v(", forgive: "),a("code",[e._v("bool")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.judgeSuspendedMember")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allow suspension judgement origin to make judgement on a suspended member.")]),e._v(" "),a("p",[e._v("If a suspended member is forgiven, we simply add them back as a member, not affecting any of the existing storage items for that member.")]),e._v(" "),a("p",[e._v("If a suspended member is rejected, remove all associated storage items, including their payouts, and remove any vouched bids they currently have.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be from the "),a("em",[e._v("SuspensionJudgementOrigin")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("who")]),e._v(" - The suspended member to be judged.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("forgive")]),e._v(" - A boolean representing whether the suspension judgement origin              forgives ("),a("code",[e._v("true")]),e._v(") or rejects ("),a("code",[e._v("false")]),e._v(") a suspended member.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids), M (len of members)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to check "),a("code",[e._v("who")]),e._v(" is a suspended member. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage write O(M) with O(log M) binary search to add a member back to society.")])]),e._v(" "),a("li",[a("p",[e._v("Up to 3 storage removals O(1) to clean up a removed member.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage write O(B) with O(B) search to remove vouched bid from bids.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one additional event if unvouch takes place.")])]),e._v(" "),a("li",[a("p",[e._v("One storage removal. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event for the judgement.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + logM + B)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"payout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payout"}},[e._v("#")]),e._v(" payout()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.payout")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Transfer the first matured payout for the sender and remove it from the records.")]),e._v(" "),a("p",[e._v("NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts.")]),e._v(" "),a("p",[e._v("Payment: The member will receive a payment equal to their first matured payout to their free balance.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a member with payouts remaining.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: M (len of members), P (number of payouts for a particular member)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read O(M) and O(log M) search to check signer is a member.")])]),e._v(" "),a("li",[a("p",[e._v("One storage read O(P) to get all payouts for a member.")])]),e._v(" "),a("li",[a("p",[e._v("One storage read O(1) to get the current block number.")])]),e._v(" "),a("li",[a("p",[e._v("One currency transfer call. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("One storage write or removal to update the member's payouts. O(P)")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + logM + P + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setmaxmembers-max-u32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setmaxmembers-max-u32"}},[e._v("#")]),e._v(" setMaxMembers(max: "),a("code",[e._v("u32")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.setMaxMembers")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Allows root origin to change the maximum number of members in society. Max membership count must be greater than 1.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be from "),a("em",[e._v("ROOT")]),e._v(".")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("max")]),e._v(" - The maximum number of members for the society.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage write to update the max. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"unbid-pos-u32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unbid-pos-u32"}},[e._v("#")]),e._v(" unbid(pos: "),a("code",[e._v("u32")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.unbid")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   A bidder can remove their bid for entry into society. By doing so, they will have their candidate deposit returned or they will unvouch their voucher.")]),e._v(" "),a("p",[e._v("Payment: The bid deposit is unreserved if the user made a bid.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a bidder.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("pos")]),e._v(": Position in the "),a("code",[e._v("Bids")]),e._v(" vector of the bid who wants to unbid.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids), X (balance unreserve)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read and write to retrieve and update the bids. O(B)")])]),e._v(" "),a("li",[a("p",[e._v("Either one unreserve balance action O(X) or one vouching storage removal. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(B + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"unfound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unfound"}},[e._v("#")]),e._v(" unfound()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.unfound")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Anull the founding of the society.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be Signed, and the signing account must be both the "),a("code",[e._v("Founder")]),e._v(" and the "),a("code",[e._v("Head")]),e._v(". This implies that it may only be done when there is one member.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Two storage reads O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Four storage removals O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(1)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"unvouch-pos-u32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unvouch-pos-u32"}},[e._v("#")]),e._v(" unvouch(pos: "),a("code",[e._v("u32")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.unvouch")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   As a vouching member, unvouch a bid. This only works while vouched user is only a bidder (and not a candidate).")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a vouching member.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("pos")]),e._v(": Position in the "),a("code",[e._v("Bids")]),e._v(" vector of the bid who should be unvouched.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read O(1) to check the signer is a vouching member.")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutate to retrieve and update the bids. O(B)")])]),e._v(" "),a("li",[a("p",[e._v("One vouching storage removal. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(B)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"vote-candidate-t-lookup-as-staticlookup-source-approve-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-candidate-t-lookup-as-staticlookup-source-approve-bool"}},[e._v("#")]),e._v(" vote(candidate: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", approve: "),a("code",[e._v("bool")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.vote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   As a member, vote on a candidate.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a member.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("candidate")]),e._v(": The candidate that the member would like to bid on.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("approve")]),e._v(": A boolean which says if the candidate should be             approved ("),a("code",[e._v("true")]),e._v(") or rejected ("),a("code",[e._v("false")]),e._v(").")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: C (len of candidates), M (len of members)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read O(M) and O(log M) search to check user is a member.")])]),e._v(" "),a("li",[a("p",[e._v("One account lookup.")])]),e._v(" "),a("li",[a("p",[e._v("One storage read O(C) and O(C) search to check that user is a candidate.")])]),e._v(" "),a("li",[a("p",[e._v("One storage write to add vote to votes. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + logM + C)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"vouch-who-t-accountid-value-balanceof-t-i-tip-balanceof-t-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vouch-who-t-accountid-value-balanceof-t-i-tip-balanceof-t-i"}},[e._v("#")]),e._v(" vouch(who: "),a("code",[e._v("T::AccountId")]),e._v(", value: "),a("code",[e._v("BalanceOf<T, I>")]),e._v(", tip: "),a("code",[e._v("BalanceOf<T, I>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.society.vouch")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   As a member, vouch for someone to join society by placing a bid on their behalf.")]),e._v(" "),a("p",[e._v("There is no deposit required to vouch for a new bid, but a member can only vouch for one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by the suspension judgement origin, the member will be banned from vouching again.")]),e._v(" "),a("p",[e._v("As a vouching member, you can claim a tip if the candidate is accepted. This tip will be paid as a portion of the reward the member will receive for joining the society.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and a member.")]),e._v(" "),a("p",[e._v("Parameters:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("who")]),e._v(": The user who you would like to vouch for.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("value")]),e._v(": The total reward to be paid between you and the candidate if they becomea member in the society.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("tip")]),e._v(": Your cut of the total "),a("code",[e._v("value")]),e._v(" payout when the candidate is inducted intothe society. Tips larger than "),a("code",[e._v("value")]),e._v(" will be saturated upon payout.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("p",[e._v("Key: B (len of bids), C (len of candidates), M (len of members)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Storage Reads:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage read to retrieve all members. O(M)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check member is not already vouching. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check for suspended candidate. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to check for suspended member. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to retrieve all current bids. O(B)")])]),e._v(" "),a("li",[a("p",[e._v("One storage read to retrieve all current candidates. O(C)")])])])]),e._v(" "),a("li",[a("p",[e._v("Storage Writes:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One storage write to insert vouching status to the member. O(1)")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)")])])])]),e._v(" "),a("li",[a("p",[e._v("Notable Computation:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(log M) search to check sender is a member.")])]),e._v(" "),a("li",[a("p",[e._v("O(B + C + log M) search to check user is not already a part of society.")])]),e._v(" "),a("li",[a("p",[e._v("O(log B) search to insert the new bid sorted.")])])])]),e._v(" "),a("li",[a("p",[e._v("External Module Operations:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One balance reserve operation. O(X)")])]),e._v(" "),a("li",[a("p",[e._v("Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.")])])])]),e._v(" "),a("li",[a("p",[e._v("Events:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("One event for vouch.")])]),e._v(" "),a("li",[a("p",[e._v("Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.")])])])])]),e._v(" "),a("p",[e._v("Total Complexity: O(M + B + C + logM + logB + X)")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"staking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#staking"}},[e._v("#")]),e._v(" staking")]),e._v(" "),a("h3",{attrs:{id:"bond-controller-t-lookup-as-staticlookup-source-value-compact-balanceof-t-payee-rewarddestination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bond-controller-t-lookup-as-staticlookup-source-value-compact-balanceof-t-payee-rewarddestination"}},[e._v("#")]),e._v(" bond(controller: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(", payee: "),a("code",[e._v("RewardDestination")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.bond")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Take the origin account as a stash and lock up "),a("code",[e._v("value")]),e._v(" of its balance. "),a("code",[e._v("controller")]),e._v(" will be the account that controls it.")]),e._v(" "),a("p",[a("code",[e._v("value")]),e._v(" must be more than the "),a("code",[e._v("minimum_balance")]),e._v(" specified by "),a("code",[e._v("T::Currency")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the stash account.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Moderate complexity.")])]),e._v(" "),a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Three extra DB entries.")])])]),e._v(" "),a("p",[e._v("NOTE: Two of the storage writes ("),a("code",[e._v("Self::bonded")]),e._v(", "),a("code",[e._v("Self::payee")]),e._v(") are "),a("em",[e._v("never")]),e._v(" cleaned unless the "),a("code",[e._v("origin")]),e._v(" falls below "),a("em",[e._v("existential deposit")]),e._v(" and gets removed as dust.")]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"bondextra-max-additional-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bondextra-max-additional-compact-balanceof-t"}},[e._v("#")]),e._v(" bondExtra(max_additional: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.bondExtra")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Add some extra amount that have appeared in the stash "),a("code",[e._v("free_balance")]),e._v(" into the balance up for staking.")]),e._v(" "),a("p",[e._v("Use this if there are additional funds in your stash account that you wish to bond. Unlike ["),a("code",[e._v("bond")]),e._v("] or ["),a("code",[e._v("unbond")]),e._v("] this function does not impose any limitation on the amount that can be added.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the stash, not the controller.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Insignificant complexity.")])]),e._v(" "),a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("One DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"canceldeferredslash-era-eraindex-slash-indices-vec-u32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canceldeferredslash-era-eraindex-slash-indices-vec-u32"}},[e._v("#")]),e._v(" cancelDeferredSlash(era: "),a("code",[e._v("EraIndex")]),e._v(", slash_indices: "),a("code",[e._v("Vec<u32>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.cancelDeferredSlash")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Cancel enactment of a deferred slash. Can be called by either the root origin or the "),a("code",[e._v("T::SlashCancelOrigin")]),e._v(". passing the era and indices of the slashes for that era to kill.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One storage write.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"chill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chill"}},[e._v("#")]),e._v(" chill()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.chill")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Declare no desire to either validate or nominate.")]),e._v(" "),a("p",[e._v("Effects will be felt at the beginning of the next era.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Insignificant complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Contains one read.")])]),e._v(" "),a("li",[a("p",[e._v("Writes are limited to the "),a("code",[e._v("origin")]),e._v(" account key.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"forcenewera"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forcenewera"}},[e._v("#")]),e._v(" forceNewEra()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.forceNewEra")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Force there to be a new era at the end of the next session. After this, it will be reset to normal (non-forced) behaviour.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("No arguments.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"forceneweraalways"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forceneweraalways"}},[e._v("#")]),e._v(" forceNewEraAlways()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.forceNewEraAlways")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Force there to be a new era at the end of sessions indefinitely.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("One storage write")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"forcenoeras"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forcenoeras"}},[e._v("#")]),e._v(" forceNoEras()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.forceNoEras")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Force there to be no new eras indefinitely.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("No arguments.")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"forceunstake-stash-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forceunstake-stash-t-accountid"}},[e._v("#")]),e._v(" forceUnstake(stash: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.forceUnstake")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Force a current staker to become completely unstaked, immediately.")])]),e._v(" "),a("h3",{attrs:{id:"nominate-targets-vec-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nominate-targets-vec-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" nominate(targets: "),a("code",[e._v("Vec<<T::Lookup as StaticLookup>::Source>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.nominate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Declare the desire to nominate "),a("code",[e._v("targets")]),e._v(" for the origin controller.")]),e._v(" "),a("p",[e._v("Effects will be felt at the beginning of the next era.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("The transaction's complexity is proportional to the size of "),a("code",[e._v("targets")]),e._v(",which is capped at "),a("code",[e._v("MAX_NOMINATIONS")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Both the reads and writes follow a similar pattern.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"rebond-value-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebond-value-compact-balanceof-t"}},[e._v("#")]),e._v(" rebond(value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.rebond")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Rebond a portion of the stash scheduled to be unlocked.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Time complexity: O(1). Bounded by "),a("code",[e._v("MAX_UNLOCKING_CHUNKS")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Storage changes: Can't increase storage, only decrease it.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setcontroller-controller-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setcontroller-controller-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" setController(controller: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.setController")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   (Re-)set the controller of a stash.")]),e._v(" "),a("p",[e._v("Effects will be felt at the beginning of the next era.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the stash, not the controller.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Insignificant complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads.")])]),e._v(" "),a("li",[a("p",[e._v("Writes are limited to the "),a("code",[e._v("origin")]),e._v(" account key.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setinvulnerables-validators-vec-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setinvulnerables-validators-vec-t-accountid"}},[e._v("#")]),e._v(" setInvulnerables(validators: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.setInvulnerables")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set the validators who cannot be slashed (if any).")])]),e._v(" "),a("h3",{attrs:{id:"setpayee-payee-rewarddestination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setpayee-payee-rewarddestination"}},[e._v("#")]),e._v(" setPayee(payee: "),a("code",[e._v("RewardDestination")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.setPayee")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   (Re-)set the payment target for a controller.")]),e._v(" "),a("p",[e._v("Effects will be felt at the beginning of the next era.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Insignificant complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads.")])]),e._v(" "),a("li",[a("p",[e._v("Writes are limited to the "),a("code",[e._v("origin")]),e._v(" account key.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setvalidatorcount-new-compact-u32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setvalidatorcount-new-compact-u32"}},[e._v("#")]),e._v(" setValidatorCount(new: "),a("code",[e._v("Compact<u32>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.setValidatorCount")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   The ideal number of validators.")])]),e._v(" "),a("h3",{attrs:{id:"unbond-value-compact-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unbond-value-compact-balanceof-t"}},[e._v("#")]),e._v(" unbond(value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.unbond")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Schedule a portion of the stash to be unlocked ready for transfer out after the bond period ends. If this leaves an amount actively bonded less than T::Currency::minimum_balance(), then it is increased to the full amount.")]),e._v(" "),a("p",[e._v("Once the unlock period is done, you can call "),a("code",[e._v("withdraw_unbonded")]),e._v(" to actually move the funds out of management ready for transfer.")]),e._v(" "),a("p",[e._v("No more than a limited number of unlocking chunks (see "),a("code",[e._v("MAX_UNLOCKING_CHUNKS")]),e._v(") can co-exists at the same time. In that case, ["),a("code",[e._v("Call::withdraw_unbonded")]),e._v("] need to be called first to remove some of the chunks (if possible).")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("See also ["),a("code",[e._v("Call::withdraw_unbonded")]),e._v("].")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Limited but potentially exploitable complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads.")])]),e._v(" "),a("li",[a("p",[e._v("Each call (requires the remainder of the bonded balance to be above "),a("code",[e._v("minimum_balance")]),e._v(")  will cause a new entry to be inserted into a vector ("),a("code",[e._v("Ledger.unlocking")]),e._v(") kept in storage.   The only way to clean the aforementioned storage item is also user-controlled via "),a("code",[e._v("withdraw_unbonded")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One DB entry.")])])])])]),e._v(" "),a("h3",{attrs:{id:"validate-prefs-validatorprefs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validate-prefs-validatorprefs"}},[e._v("#")]),e._v(" validate(prefs: "),a("code",[e._v("ValidatorPrefs")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.validate")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Declare the desire to validate for the origin controller.")]),e._v(" "),a("p",[e._v("Effects will be felt at the beginning of the next era.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Independent of the arguments. Insignificant complexity.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads.")])]),e._v(" "),a("li",[a("p",[e._v("Writes are limited to the "),a("code",[e._v("origin")]),e._v(" account key.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"withdrawunbonded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withdrawunbonded"}},[e._v("#")]),e._v(" withdrawUnbonded()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.staking.withdrawUnbonded")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove any unlocked chunks from the "),a("code",[e._v("unlocking")]),e._v(" queue from our management.")]),e._v(" "),a("p",[e._v("This essentially frees up that balance to be used by the stash account to do whatever it wants.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" by the controller, not the stash.")]),e._v(" "),a("p",[e._v("See also ["),a("code",[e._v("Call::unbond")]),e._v("].")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Could be dependent on the "),a("code",[e._v("origin")]),e._v(" argument and how much "),a("code",[e._v("unlocking")]),e._v(" chunks exist. It implies "),a("code",[e._v("consolidate_unlocked")]),e._v(" which loops over "),a("code",[e._v("Ledger.unlocking")]),e._v(", which is  indirectly user-controlled. See ["),a("code",[e._v("unbond")]),e._v("] for more detail.")])]),e._v(" "),a("li",[a("p",[e._v("Contains a limited number of reads, yet the size of which could be large based on "),a("code",[e._v("ledger")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Writes are limited to the "),a("code",[e._v("origin")]),e._v(" account key.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"sudo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sudo"}},[e._v("#")]),e._v(" sudo")]),e._v(" "),a("h3",{attrs:{id:"setkey-new-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setkey-new-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" setKey(new: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.sudo.setKey")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Authenticates the current sudo key and sets the given AccountId ("),a("code",[e._v("new")]),e._v(") as the new sudo key.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB change.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"sudo-proposal-box-t-proposal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sudo-proposal-box-t-proposal"}},[e._v("#")]),e._v(" sudo(proposal: "),a("code",[e._v("Box<T::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.sudo.sudo")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Authenticates the sudo key and dispatches a function call with "),a("code",[e._v("Root")]),e._v(" origin.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB write (event).")])]),e._v(" "),a("li",[a("p",[e._v("Unknown weight of derivative "),a("code",[e._v("proposal")]),e._v(" execution.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"sudoas-who-t-lookup-as-staticlookup-source-proposal-box-t-proposal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sudoas-who-t-lookup-as-staticlookup-source-proposal-box-t-proposal"}},[e._v("#")]),e._v(" sudoAs(who: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(", proposal: "),a("code",[e._v("Box<T::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.sudo.sudoAs")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Authenticates the sudo key and dispatches a function call with "),a("code",[e._v("Signed")]),e._v(" origin from a given account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB write (event).")])]),e._v(" "),a("li",[a("p",[e._v("Unknown weight of derivative "),a("code",[e._v("proposal")]),e._v(" execution.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system"}},[e._v("#")]),e._v(" system")]),e._v(" "),a("h3",{attrs:{id:"fillblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fillblock"}},[e._v("#")]),e._v(" fillBlock()")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.fillBlock")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   A big dispatch that will disallow any other transaction to be included.")])]),e._v(" "),a("h3",{attrs:{id:"killprefix-prefix-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killprefix-prefix-key"}},[e._v("#")]),e._v(" killPrefix(prefix: "),a("code",[e._v("Key")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.killPrefix")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Kill all storage items with a key that starts with the given prefix.")])]),e._v(" "),a("h3",{attrs:{id:"killstorage-keys-vec-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killstorage-keys-vec-key"}},[e._v("#")]),e._v(" killStorage(keys: "),a("code",[e._v("Vec<Key>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.killStorage")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Kill some items from storage.")])]),e._v(" "),a("h3",{attrs:{id:"remark-remark-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remark-remark-vec-u8"}},[e._v("#")]),e._v(" remark(_remark: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.remark")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Make some on-chain remark.")])]),e._v(" "),a("h3",{attrs:{id:"setchangestrieconfig-changes-trie-config-option-changestrieconfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setchangestrieconfig-changes-trie-config-option-changestrieconfiguration"}},[e._v("#")]),e._v(" setChangesTrieConfig(changes_trie_config: "),a("code",[e._v("Option<ChangesTrieConfiguration>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.setChangesTrieConfig")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set the new changes trie configuration.")])]),e._v(" "),a("h3",{attrs:{id:"setcode-code-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setcode-code-vec-u8"}},[e._v("#")]),e._v(" setCode(code: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.setCode")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set the new runtime code.")])]),e._v(" "),a("h3",{attrs:{id:"setcodewithoutchecks-code-vec-u8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setcodewithoutchecks-code-vec-u8"}},[e._v("#")]),e._v(" setCodeWithoutChecks(code: "),a("code",[e._v("Vec<u8>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.setCodeWithoutChecks")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set the new runtime code without doing any checks of the given "),a("code",[e._v("code")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"setheappages-pages-u64"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setheappages-pages-u64"}},[e._v("#")]),e._v(" setHeapPages(pages: "),a("code",[e._v("u64")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.setHeapPages")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set the number of pages in the WebAssembly environment's heap.")])]),e._v(" "),a("h3",{attrs:{id:"setstorage-items-vec-keyvalue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setstorage-items-vec-keyvalue"}},[e._v("#")]),e._v(" setStorage(items: "),a("code",[e._v("Vec<KeyValue>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("interface")]),e._v(": api.tx.system.setStorage")]),e._v(" "),a("li",[a("strong",[e._v("summary")]),e._v(":   Set some items of storage.")])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"technicalcommittee"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#technicalcommittee"}},[e._v("#")]),e._v(" technicalCommittee")]),e._v(" "),a("h3",{attrs:{id:"execute-proposal-box-t-as-trait-i-proposal-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execute-proposal-box-t-as-trait-i-proposal-2"}},[e._v("#")]),e._v(" execute(proposal: "),a("code",[e._v("Box<<T as Trait<I>>::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalCommittee.execute")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Dispatch a proposal from a member using the "),a("code",[e._v("Member")]),e._v(" origin.")]),e._v(" "),a("p",[e._v("Origin must be a member of the collective.")])])]),e._v(" "),a("h3",{attrs:{id:"propose-threshold-compact-membercount-proposal-box-t-as-trait-i-proposal-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#propose-threshold-compact-membercount-proposal-box-t-as-trait-i-proposal-2"}},[e._v("#")]),e._v(" propose(threshold: "),a("code",[e._v("Compact<MemberCount>")]),e._v(", proposal: "),a("code",[e._v("Box<<T as Trait<I>>::Proposal>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalCommittee.propose")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   # <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Bounded storage reads and writes.")])]),e._v(" "),a("li",[a("p",[e._v("Argument "),a("code",[e._v("threshold")]),e._v(" has bearing on weight.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"setmembers-new-members-vec-t-accountid-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setmembers-new-members-vec-t-accountid-2"}},[e._v("#")]),e._v(" setMembers(new_members: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalCommittee.setMembers")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the collective's membership manually to "),a("code",[e._v("new_members")]),e._v(". Be nice to the chain and provide it pre-sorted.")]),e._v(" "),a("p",[e._v("Requires root origin.")])])]),e._v(" "),a("h3",{attrs:{id:"vote-proposal-t-hash-index-compact-proposalindex-approve-bool-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-proposal-t-hash-index-compact-proposalindex-approve-bool-2"}},[e._v("#")]),e._v(" vote(proposal: "),a("code",[e._v("T::Hash")]),e._v(", index: "),a("code",[e._v("Compact<ProposalIndex>")]),e._v(", approve: "),a("code",[e._v("bool")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalCommittee.vote")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   # <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Bounded storage read and writes.")])]),e._v(" "),a("li",[a("p",[e._v("Will be slightly heavier if the proposal is approved / disapproved after the vote.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"technicalmembership"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#technicalmembership"}},[e._v("#")]),e._v(" technicalMembership")]),e._v(" "),a("h3",{attrs:{id:"addmember-who-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addmember-who-t-accountid"}},[e._v("#")]),e._v(" addMember(who: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalMembership.addMember")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Add a member "),a("code",[e._v("who")]),e._v(" to the set.")]),e._v(" "),a("p",[e._v("May only be called from "),a("code",[e._v("AddOrigin")]),e._v(" or root.")])])]),e._v(" "),a("h3",{attrs:{id:"changekey-new-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changekey-new-t-accountid"}},[e._v("#")]),e._v(" changeKey(new: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalMembership.changeKey")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Swap out the sending member for some other key "),a("code",[e._v("new")]),e._v(".")]),e._v(" "),a("p",[e._v("May only be called from "),a("code",[e._v("Signed")]),e._v(" origin of a current member.")])])]),e._v(" "),a("h3",{attrs:{id:"removemember-who-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removemember-who-t-accountid"}},[e._v("#")]),e._v(" removeMember(who: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalMembership.removeMember")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Remove a member "),a("code",[e._v("who")]),e._v(" from the set.")]),e._v(" "),a("p",[e._v("May only be called from "),a("code",[e._v("RemoveOrigin")]),e._v(" or root.")])])]),e._v(" "),a("h3",{attrs:{id:"resetmembers-members-vec-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resetmembers-members-vec-t-accountid"}},[e._v("#")]),e._v(" resetMembers(members: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalMembership.resetMembers")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Change the membership to a new set, disregarding the existing membership. Be nice and pass "),a("code",[e._v("members")]),e._v(" pre-sorted.")]),e._v(" "),a("p",[e._v("May only be called from "),a("code",[e._v("ResetOrigin")]),e._v(" or root.")])])]),e._v(" "),a("h3",{attrs:{id:"swapmember-remove-t-accountid-add-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swapmember-remove-t-accountid-add-t-accountid"}},[e._v("#")]),e._v(" swapMember(remove: "),a("code",[e._v("T::AccountId")]),e._v(", add: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.technicalMembership.swapMember")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Swap out one member "),a("code",[e._v("remove")]),e._v(" for another "),a("code",[e._v("add")]),e._v(".")]),e._v(" "),a("p",[e._v("May only be called from "),a("code",[e._v("SwapOrigin")]),e._v(" or root.")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"timestamp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timestamp"}},[e._v("#")]),e._v(" timestamp")]),e._v(" "),a("h3",{attrs:{id:"set-now-compact-t-moment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-now-compact-t-moment"}},[e._v("#")]),e._v(" set(now: "),a("code",[e._v("Compact<T::Moment>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.timestamp.set")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Set the current time.")]),e._v(" "),a("p",[e._v("This call should be invoked exactly once per block. It will panic at the finalization phase, if this call hasn't been invoked by that time.")]),e._v(" "),a("p",[e._v("The timestamp should be greater than the previous one by the amount specified by "),a("code",[e._v("MinimumPeriod")]),e._v(".")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("code",[e._v("Inherent")]),e._v(".")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"treasury"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treasury"}},[e._v("#")]),e._v(" treasury")]),e._v(" "),a("h3",{attrs:{id:"approveproposal-proposal-id-compact-proposalindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#approveproposal-proposal-id-compact-proposalindex"}},[e._v("#")]),e._v(" approveProposal(proposal_id: "),a("code",[e._v("Compact<ProposalIndex>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.approveProposal")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Approve a proposal. At a later time, the proposal will be allocated to the beneficiary and the original deposit will be returned.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB change.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"closetip-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closetip-hash-t-hash"}},[e._v("#")]),e._v(" closeTip(hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.closeTip")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Close and payout a tip.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("The tip identified by "),a("code",[e._v("hash")]),e._v(" must have finished its countdown period.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("hash")]),e._v(": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the original tip "),a("code",[e._v("reason")]),e._v(" and the beneficiary account ID.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(T)")])])]),e._v(" "),a("li",[a("p",[e._v("One storage retrieval (codec "),a("code",[e._v("O(T)")]),e._v(") and two removals.")])]),e._v(" "),a("li",[a("p",[e._v("Up to three balance operations.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"proposespend-value-compact-balanceof-t-beneficiary-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proposespend-value-compact-balanceof-t-beneficiary-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" proposeSpend(value: "),a("code",[e._v("Compact<BalanceOf<T>>")]),e._v(", beneficiary: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.proposeSpend")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Put forward a suggestion for spending. A deposit proportional to the value is reserved and slashed if the proposal is rejected. It is returned once the proposal is awarded.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB change, one extra DB entry.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"rejectproposal-proposal-id-compact-proposalindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rejectproposal-proposal-id-compact-proposalindex"}},[e._v("#")]),e._v(" rejectProposal(proposal_id: "),a("code",[e._v("Compact<ProposalIndex>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.rejectProposal")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Reject a proposed spend. The original deposit will be slashed.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("O(1).")])]),e._v(" "),a("li",[a("p",[e._v("Limited storage reads.")])]),e._v(" "),a("li",[a("p",[e._v("One DB clear.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"reportawesome-reason-vec-u8-who-t-accountid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reportawesome-reason-vec-u8-who-t-accountid"}},[e._v("#")]),e._v(" reportAwesome(reason: "),a("code",[e._v("Vec<u8>")]),e._v(", who: "),a("code",[e._v("T::AccountId")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.reportAwesome")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Report something "),a("code",[e._v("reason")]),e._v(" that deserves a tip and claim any eventual the finder's fee.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("TipReportDepositBase")]),e._v(" will be reserved from the origin account, as well as "),a("code",[e._v("TipReportDepositPerByte")]),e._v(" for each byte in "),a("code",[e._v("reason")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("reason")]),e._v(": The reason for, or the thing that deserves, the tip; generally this will be   a UTF-8-encoded URL.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("who")]),e._v(": The account which should be credited for the tip.")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("NewTip")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R)")]),e._v(" where "),a("code",[e._v("R")]),e._v(" length of "),a("code",[e._v("reason")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance operation.")])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(R)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"retracttip-hash-t-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retracttip-hash-t-hash"}},[e._v("#")]),e._v(" retractTip(hash: "),a("code",[e._v("T::Hash")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.retractTip")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Retract a prior tip-report from "),a("code",[e._v("report_awesome")]),e._v(", and cancel the process of tipping.")]),e._v(" "),a("p",[e._v("If successful, the original deposit will be unreserved.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the tip identified by "),a("code",[e._v("hash")]),e._v(" must have been reported by the signing account through "),a("code",[e._v("report_awesome")]),e._v(" (and not through "),a("code",[e._v("tip_new")]),e._v(").")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("hash")]),e._v(": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the original tip "),a("code",[e._v("reason")]),e._v(" and the beneficiary account ID.")])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("TipRetracted")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(T)")])])]),e._v(" "),a("li",[a("p",[e._v("One balance operation.")])]),e._v(" "),a("li",[a("p",[e._v("Two storage removals (one read, codec "),a("code",[e._v("O(T)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"tip-hash-t-hash-tip-value-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tip-hash-t-hash-tip-value-balanceof-t"}},[e._v("#")]),e._v(" tip(hash: "),a("code",[e._v("T::Hash")]),e._v(", tip_value: "),a("code",[e._v("BalanceOf<T>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.tip")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Declare a tip value for an already-open tip.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the signing account must be a member of the "),a("code",[e._v("Tippers")]),e._v(" set.")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("hash")]),e._v(": The identity of the open tip for which a tip value is declared. This is formed   as the hash of the tuple of the hash of the original tip "),a("code",[e._v("reason")]),e._v(" and the beneficiary   account ID.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("tip_value")]),e._v(": The amount of tip that the sender would like to give. The median tip  value of active tippers will be given to the "),a("code",[e._v("who")]),e._v(".")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("TipClosing")]),e._v(" if the threshold of tippers has been reached and the countdown period has started.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(T)")])])]),e._v(" "),a("li",[a("p",[e._v("One storage mutation (codec "),a("code",[e._v("O(T)")]),e._v("), one storage read "),a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"tipnew-reason-vec-u8-who-t-accountid-tip-value-balanceof-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tipnew-reason-vec-u8-who-t-accountid-tip-value-balanceof-t"}},[e._v("#")]),e._v(" tipNew(reason: "),a("code",[e._v("Vec<u8>")]),e._v(", who: "),a("code",[e._v("T::AccountId")]),e._v(", tip_value: "),a("code",[e._v("BalanceOf<T>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.treasury.tipNew")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Give a tip for something new; no finder's fee will be taken.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the signing account must be a member of the "),a("code",[e._v("Tippers")]),e._v(" set.")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("reason")]),e._v(": The reason for, or the thing that deserves, the tip; generally this will be   a UTF-8-encoded URL.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("who")]),e._v(": The account which should be credited for the tip.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("tip_value")]),e._v(": The amount of tip that the sender would like to give. The median tip  value of active tippers will be given to the "),a("code",[e._v("who")]),e._v(".")])])]),e._v(" "),a("p",[e._v("Emits "),a("code",[e._v("NewTip")]),e._v(" if successful.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(R + T)")]),e._v(" where "),a("code",[e._v("R")]),e._v(" length of "),a("code",[e._v("reason")]),e._v(", "),a("code",[e._v("T")]),e._v(" is the number of tippers. "),a("code",[e._v("T")]),e._v(" is  naturally capped as a membership set, "),a("code",[e._v("R")]),e._v(" is limited through transaction-size.")])]),e._v(" "),a("li",[a("p",[e._v("Two storage insertions (codecs "),a("code",[e._v("O(R)")]),e._v(", "),a("code",[e._v("O(T)")]),e._v("), one read "),a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"utility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utility"}},[e._v("#")]),e._v(" utility")]),e._v(" "),a("h3",{attrs:{id:"approveasmulti-threshold-u16-other-signatories-vec-t-accountid-maybe-timepoint-option-timepoint-t-blocknumber-call-hash-u8-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#approveasmulti-threshold-u16-other-signatories-vec-t-accountid-maybe-timepoint-option-timepoint-t-blocknumber-call-hash-u8-32"}},[e._v("#")]),e._v(" approveAsMulti(threshold: "),a("code",[e._v("u16")]),e._v(", other_signatories: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(", maybe_timepoint: "),a("code",[e._v("Option<Timepoint<T::BlockNumber>>")]),e._v(", call_hash: "),a("code",[e._v("[u8; 32]")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.utility.approveAsMulti")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Register approval for a dispatch to be made from a deterministic composite account if approved by a total of "),a("code",[e._v("threshold - 1")]),e._v(" of "),a("code",[e._v("other_signatories")]),e._v(".")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("MultisigDepositBase")]),e._v(" will be reserved if this is the first approval, plus "),a("code",[e._v("threshold")]),e._v(" times "),a("code",[e._v("MultisigDepositFactor")]),e._v(". It is returned once this dispatch happens or is cancelled.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("threshold")]),e._v(": The total number of approvals for this dispatch before it is executed.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("other_signatories")]),e._v(": The accounts (other than the sender) who can approve thisdispatch. May not be empty.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("maybe_timepoint")]),e._v(": If this is the first approval, then this must be "),a("code",[e._v("None")]),e._v(". If it isnot the first approval, then it must be "),a("code",[e._v("Some")]),e._v(", with the timepoint (block number and transaction index) of the first approval transaction.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("call_hash")]),e._v(": The hash of the call to be executed.")])])]),e._v(" "),a("p",[e._v("NOTE: If this is the final approval, you will want to use "),a("code",[e._v("as_multi")]),e._v(" instead.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(S)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one balance-reserve or unreserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One passthrough operation, one insert, both "),a("code",[e._v("O(S)")]),e._v(" where "),a("code",[e._v("S")]),e._v(" is the number of  signatories. "),a("code",[e._v("S")]),e._v(" is capped by "),a("code",[e._v("MaxSignatories")]),e._v(", with weight being proportional.")])]),e._v(" "),a("li",[a("p",[e._v("One encode & hash, both of complexity "),a("code",[e._v("O(S)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one binary search and insert ("),a("code",[e._v("O(logS + S)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("I/O: 1 read "),a("code",[e._v("O(S)")]),e._v(", up to 1 mutate "),a("code",[e._v("O(S)")]),e._v(". Up to one remove.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])]),e._v(" "),a("li",[a("p",[e._v("Storage: inserts one item, value size bounded by "),a("code",[e._v("MaxSignatories")]),e._v(", with a  deposit taken for its lifetime of   "),a("code",[e._v("MultisigDepositBase + threshold * MultisigDepositFactor")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"asmulti-threshold-u16-other-signatories-vec-t-accountid-maybe-timepoint-option-timepoint-t-blocknumber-call-box-t-as-trait-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asmulti-threshold-u16-other-signatories-vec-t-accountid-maybe-timepoint-option-timepoint-t-blocknumber-call-box-t-as-trait-call"}},[e._v("#")]),e._v(" asMulti(threshold: "),a("code",[e._v("u16")]),e._v(", other_signatories: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(", maybe_timepoint: "),a("code",[e._v("Option<Timepoint<T::BlockNumber>>")]),e._v(", call: "),a("code",[e._v("Box<<T as Trait>::Call>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.utility.asMulti")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Register approval for a dispatch to be made from a deterministic composite account if approved by a total of "),a("code",[e._v("threshold - 1")]),e._v(" of "),a("code",[e._v("other_signatories")]),e._v(".")]),e._v(" "),a("p",[e._v("If there are enough, then dispatch the call.")]),e._v(" "),a("p",[e._v("Payment: "),a("code",[e._v("MultisigDepositBase")]),e._v(" will be reserved if this is the first approval, plus "),a("code",[e._v("threshold")]),e._v(" times "),a("code",[e._v("MultisigDepositFactor")]),e._v(". It is returned once this dispatch happens or is cancelled.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("threshold")]),e._v(": The total number of approvals for this dispatch before it is executed.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("other_signatories")]),e._v(": The accounts (other than the sender) who can approve thisdispatch. May not be empty.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("maybe_timepoint")]),e._v(": If this is the first approval, then this must be "),a("code",[e._v("None")]),e._v(". If it isnot the first approval, then it must be "),a("code",[e._v("Some")]),e._v(", with the timepoint (block number and transaction index) of the first approval transaction.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("call")]),e._v(": The call to be executed.")])])]),e._v(" "),a("p",[e._v("NOTE: Unless this is the final approval, you will generally want to use "),a("code",[e._v("approve_as_multi")]),e._v(" instead, since it only requires a hash of the call.")]),e._v(" "),a("p",[e._v("Result is equivalent to the dispatched result if "),a("code",[e._v("threshold")]),e._v(" is exactly "),a("code",[e._v("1")]),e._v(". Otherwise on success, result is "),a("code",[e._v("Ok")]),e._v(" and the result from the interior call, if it was executed, may be found in the deposited "),a("code",[e._v("MultisigExecuted")]),e._v(" event.")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(S + Z + Call)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one balance-reserve or unreserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One passthrough operation, one insert, both "),a("code",[e._v("O(S)")]),e._v(" where "),a("code",[e._v("S")]),e._v(" is the number of  signatories. "),a("code",[e._v("S")]),e._v(" is capped by "),a("code",[e._v("MaxSignatories")]),e._v(", with weight being proportional.")])]),e._v(" "),a("li",[a("p",[e._v("One call encode & hash, both of complexity "),a("code",[e._v("O(Z)")]),e._v(" where "),a("code",[e._v("Z")]),e._v(" is tx-len.")])]),e._v(" "),a("li",[a("p",[e._v("One encode & hash, both of complexity "),a("code",[e._v("O(S)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one binary search and insert ("),a("code",[e._v("O(logS + S)")]),e._v(").")])]),e._v(" "),a("li",[a("p",[e._v("I/O: 1 read "),a("code",[e._v("O(S)")]),e._v(", up to 1 mutate "),a("code",[e._v("O(S)")]),e._v(". Up to one remove.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])]),e._v(" "),a("li",[a("p",[e._v("The weight of the "),a("code",[e._v("call")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Storage: inserts one item, value size bounded by "),a("code",[e._v("MaxSignatories")]),e._v(", with a  deposit taken for its lifetime of   "),a("code",[e._v("MultisigDepositBase + threshold * MultisigDepositFactor")]),e._v(".")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"assub-index-u16-call-box-t-as-trait-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assub-index-u16-call-box-t-as-trait-call"}},[e._v("#")]),e._v(" asSub(index: "),a("code",[e._v("u16")]),e._v(", call: "),a("code",[e._v("Box<<T as Trait>::Call>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.utility.asSub")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Send a call through an indexed pseudonym of the sender.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[e._v("The weight of the "),a("code",[e._v("call")]),e._v(".")])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"batch-calls-vec-t-as-trait-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batch-calls-vec-t-as-trait-call"}},[e._v("#")]),e._v(" batch(calls: "),a("code",[e._v("Vec<<T as Trait>::Call>")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.utility.batch")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Send a batch of dispatch calls.")]),e._v(" "),a("p",[e._v("This will execute until the first one fails and then stop.")]),e._v(" "),a("p",[e._v("May be called from any origin.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("calls")]),e._v(": The calls to be dispatched from the same origin.")])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("The sum of the weights of the "),a("code",[e._v("calls")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")]),e._v(" "),a("p",[e._v("This will return "),a("code",[e._v("Ok")]),e._v(" in all circumstances. To determine the success of the batch, an event is deposited. If a call failed and the batch was interrupted, then the "),a("code",[e._v("BatchInterrupted")]),e._v(" event is deposited, along with the number of successful calls made and the error of the failed call. If all were successful, then the "),a("code",[e._v("BatchCompleted")]),e._v(" event is deposited.")])])]),e._v(" "),a("h3",{attrs:{id:"cancelasmulti-threshold-u16-other-signatories-vec-t-accountid-timepoint-timepoint-t-blocknumber-call-hash-u8-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cancelasmulti-threshold-u16-other-signatories-vec-t-accountid-timepoint-timepoint-t-blocknumber-call-hash-u8-32"}},[e._v("#")]),e._v(" cancelAsMulti(threshold: "),a("code",[e._v("u16")]),e._v(", other_signatories: "),a("code",[e._v("Vec<T::AccountId>")]),e._v(", timepoint: "),a("code",[e._v("Timepoint<T::BlockNumber>")]),e._v(", call_hash: "),a("code",[e._v("[u8; 32]")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.utility.cancelAsMulti")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously for this operation will be unreserved on success.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("threshold")]),e._v(": The total number of approvals for this dispatch before it is executed.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("other_signatories")]),e._v(": The accounts (other than the sender) who can approve thisdispatch. May not be empty.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("timepoint")]),e._v(": The timepoint (block number and transaction index) of the first approvaltransaction for this dispatch.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("call_hash")]),e._v(": The hash of the call to be executed.")])])]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(S)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one balance-reserve or unreserve operation.")])]),e._v(" "),a("li",[a("p",[e._v("One passthrough operation, one insert, both "),a("code",[e._v("O(S)")]),e._v(" where "),a("code",[e._v("S")]),e._v(" is the number of  signatories. "),a("code",[e._v("S")]),e._v(" is capped by "),a("code",[e._v("MaxSignatories")]),e._v(", with weight being proportional.")])]),e._v(" "),a("li",[a("p",[e._v("One encode & hash, both of complexity "),a("code",[e._v("O(S)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])]),e._v(" "),a("li",[a("p",[e._v("I/O: 1 read "),a("code",[e._v("O(S)")]),e._v(", one remove.")])]),e._v(" "),a("li",[a("p",[e._v("Storage: removes one item.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"vesting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vesting"}},[e._v("#")]),e._v(" vesting")]),e._v(" "),a("h3",{attrs:{id:"vest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vest"}},[e._v("#")]),e._v(" vest()")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.vesting.vest")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Unlock any vested funds of the sender account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(" and the sender must have funds still locked under this module.")]),e._v(" "),a("p",[e._v("Emits either "),a("code",[e._v("VestingCompleted")]),e._v(" or "),a("code",[e._v("VestingUpdated")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("One balance-lock operation.")])]),e._v(" "),a("li",[a("p",[e._v("One storage read (codec "),a("code",[e._v("O(1)")]),e._v(") and up to one removal.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])]),e._v(" "),a("h3",{attrs:{id:"vestother-target-t-lookup-as-staticlookup-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vestother-target-t-lookup-as-staticlookup-source"}},[e._v("#")]),e._v(" vestOther(target: "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(")")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("interface")]),e._v(": api.tx.vesting.vestOther")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("summary")]),e._v(":   Unlock any vested funds of a "),a("code",[e._v("target")]),e._v(" account.")]),e._v(" "),a("p",[e._v("The dispatch origin for this call must be "),a("em",[e._v("Signed")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("target")]),e._v(": The account whose vested funds should be unlocked. Must have funds still locked under this module.")])]),e._v(" "),a("p",[e._v("Emits either "),a("code",[e._v("VestingCompleted")]),e._v(" or "),a("code",[e._v("VestingUpdated")]),e._v(".")]),e._v(" "),a("p",[e._v("# <weight>")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("O(1)")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Up to one account lookup.")])]),e._v(" "),a("li",[a("p",[e._v("One balance-lock operation.")])]),e._v(" "),a("li",[a("p",[e._v("One storage read (codec "),a("code",[e._v("O(1)")]),e._v(") and up to one removal.")])]),e._v(" "),a("li",[a("p",[e._v("One event.")])])]),e._v(" "),a("p",[e._v("# </weight>")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);